import React, { useCallback } from 'react'; import styles from './ControlPanel.module.css'; import { useSimulation } from '../../context/SimulationContext';
interface ControlPanelProps { setDisplayNumGpus: (num: number) => void; }
const ControlPanel: React.FC<ControlPanelProps> = ({ setDisplayNumGpus }) => { const { play, pause, nextStep, prevStep, reset, setStrategy, strategy, setNumGpus, numGpus, isPlaying, currentStep, totalSteps } = useSimulation(); const handleGpuChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => { const num = parseInt(event.target.value, 10); setNumGpus(num); /* Context useEffect handles reset */ setDisplayNumGpus(num); }, [setNumGpus, setDisplayNumGpus]); const handleStrategyChange = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => { const newStrategy = event.target.value; setStrategy(newStrategy); /* Context useEffect handles reset */ }, [setStrategy]); const isSliderDisabled = strategy === 'single' || strategy === 'tp'; const maxGpus = strategy === 'tp' ? 2 : 8; const handlePlayPause = () => { if (isPlaying) pause(); else play(); };
  return ( <div className={styles.controlPanel}> <h2>Controls</h2> <div className={styles.controlGroup}> <label htmlFor="strategy-select">Strategy:</label> <select id="strategy-select" value={strategy} onChange={handleStrategyChange}> <option value="single">Single GPU</option> <option value="dp">Data Parallel (DP)</option> <option value="fsdp">Fully Sharded Data Parallel (FSDP)</option> <option value="tp">Tensor Parallel (TP, N=2)</option> </select> </div> <div className={styles.controlGroup}> <label htmlFor="gpu-slider">Num GPUs:</label> <input type="range" id="gpu-slider" min={strategy === 'dp' || strategy === 'fsdp' ? "2" : "1"} max={maxGpus} value={numGpus} onChange={handleGpuChange} disabled={isSliderDisabled} className={styles.slider} /> <span className={styles.sliderValue}>{numGpus}</span> {isSliderDisabled && strategy === 'single' && <small>(Set Strategy to DP/FSDP/TP)</small>} {isSliderDisabled && strategy === 'tp' && <small>(Fixed N=2 for TP)</small>} </div> <div className={styles.simulationControls}> <button onClick={handlePlayPause} disabled={currentStep >= totalSteps}>{isPlaying ? 'Pause' : (currentStep >= totalSteps ? 'Done' : 'Play')}</button> <button onClick={prevStep} disabled={currentStep === 0 || isPlaying}>Step Backward</button> <button onClick={nextStep} disabled={currentStep >= totalSteps || isPlaying}>Step Forward</button> <button onClick={reset}>Reset</button> </div> <div>Step: {currentStep} / {totalSteps}</div> </div> ); };
export default ControlPanel;
